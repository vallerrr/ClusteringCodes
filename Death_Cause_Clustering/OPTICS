#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  4 15:46:12 2019

@author: valler
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
from matplotlib import gridspec 
from sklearn.cluster import OPTICS, cluster_optics_dbscan 
from sklearn.preprocessing import normalize, StandardScaler 
from sklearn.cluster import DBSCAN 
from sklearn import metrics 
from sklearn.datasets.samples_generator import make_blobs 
from sklearn.preprocessing import StandardScaler 
from sklearn import datasets 
from sklearn.ensemble import RandomForestRegressor
from sklearn.decomposition import PCA
from sklearn import metrics 
#1 import data






def OPTICS_(Data):
    

    '''    
    #2.1 Scale the data
    scaler = StandardScaler()
    Data_scaled =scaler.fit_transform(Data)
    #2.2Normalize the data
    Data_nor=normalize(Data_scaled)
    Data_nor=pd.DataFrame(Data_nor,index=Data.index)
    Data_nor.columns=Data.columns
    '''
    
    Data_nor=Data
    #3 Building the OPTICS model
    opt=OPTICS(min_samples=10, xi=0.04, min_cluster_size =0.05)
    opt.fit(Data_nor)
    
    
    
    #4 Store the results
    #4.1 Producing the labels according to the DBSCAN technique with eps =  
    labels1 = cluster_optics_dbscan(reachability = opt.reachability_, 
                                       core_distances = opt.core_distances_, 
                                       ordering = opt.ordering_, eps = 0.28) 
    
    #4.2 Producing the labels according to the DBSCAN technique with eps = 
    
    labels2 = cluster_optics_dbscan(reachability = opt.reachability_, 
                                       core_distances = opt.core_distances_, 
                                       ordering = opt.ordering_, eps = 1) 
    #ore=cluster_optics_dbscan(reachability = opt.reachability_, core_distances = opt.core_distances_, ordering = opt.ordering_, eps = 1).core_sample_indices_

    #print(opt.cluster_hierarchy_)
    print(opt.core_distances_)
    
    space = np.arange(len(Data_nor)) 
    reachability = opt.reachability_[opt.ordering_] 
    labels = opt.labels_[opt.ordering_] 
    
    #visualizing the results
    plt.figure(figsize =(7, 12)) 
    G = gridspec.GridSpec(3, 2) 
    ax1 = plt.subplot(G[0, :]) 
    ax2 = plt.subplot(G[1, :]) 
    ax3 = plt.subplot(G[2, 0]) 
    ax4 = plt.subplot(G[2, 1])

    
    colors = ['c.', 'b.', 'r.', 'y.', 'g.'] 
    for Class, colour in zip(range(0, 5), colors): 
        Xk = space[labels == Class] 
        Rk = reachability[labels == Class] 
        ax1.plot(Xk, Rk, colour, alpha = 0.3) #alpha transparent degree
    ax1.plot(space[labels == -1], reachability[labels == -1], 'k.', alpha = 0.3) 
    ax1.plot(space, np.full_like(space, 2., dtype = float), 'k-', alpha = 0.5) 
    ax1.plot(space, np.full_like(space, 0.5, dtype = float), 'k-.', alpha = 0.5) 
    ax1.set_ylabel('Reachability Distance') 
    ax1.set_title('Reachability Plot') 
      
    # Plotting the OPTICS Clustering 
    colors = ['c.', 'b.', 'r.', 'y.', 'g.'] 
    for Class, colour in zip(range(0, 5), colors): 
        Xk = Data_nor[opt.labels_ == Class] 
        ax2.plot(Xk.iloc[:, 0], Xk.iloc[:, 1], colour, alpha = 0.3) 
          
    ax2.plot(Data_nor.iloc[opt.labels_ == -1, 0], 
            Data_nor.iloc[opt.labels_ == -1, 1], 
           'k+', alpha = 0.1) 
    ax2.set_title('OPTICS Clustering') 

    
    
    # Plotting the DBSCAN Clustering with eps = 0.5 
    colors = ['c', 'b', 'r', 'y', 'g', 'greenyellow'] 
    for Class, colour in zip(range(0, 6), colors): 
        Xk = Data_nor[labels1 == Class] 
        ax3.plot(Xk.iloc[:, 0], Xk.iloc[:, 1], colour, alpha = 0.3, marker ='.') 
            
    ax3.plot(Data_nor.iloc[labels1 == -1, 0], 
            Data_nor.iloc[labels1 == -1, 1], 
           'k+', alpha = 0.1) 
    ax3.set_title('DBSCAN clustering with eps = 0.3') 
      
    # Plotting the DBSCAN Clustering with eps = 2.0 
    colors = ['c.', 'y.', 'm.', 'g.'] 
    for Class, colour in zip(range(0, 4), colors): 
        Xk = Data_nor.iloc[labels2 == Class] 
        ax4.plot(Xk.iloc[:, 0], Xk.iloc[:, 1], colour, alpha = 0.3) 
              
    ax4.plot(Data_nor.iloc[labels2 == -1, 0], 
            Data_nor.iloc[labels2 == -1, 1], 
           'k+', alpha = 0.1) 
    ax4.set_title('DBSCAN Clustering with eps = 1') 
    
    plt.tight_layout() 
    plt.show() 
    
    print(metrics.silhouette_score(Data_nor, labels))




def DBSCAN_(Data):#

    scaler = StandardScaler()
    Data_scaled =scaler.fit_transform(Data)
    #2.2Normalize the data
    Data_nor=normalize(Data_scaled)
    #Data_nor=pd.DataFrame(Data_nor,index=Data.index)
    #Data_nor.columns=Data.columns
    
    X=Data_nor
    
    db = DBSCAN(eps=0.1, min_samples=3).fit(X) 
    core_samples_mask = np.zeros_like(db.labels_, dtype=bool) 
    core_samples_mask[db.core_sample_indices_] = True
    labels = db.labels_ 
    
    # Number of clusters in labels, ignoring noise if present. 
    n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0) 
      
    print(labels) 
    
    
    # Black removed and is used for noise instead. 
    unique_labels = set(labels) 
    colors = ['y', 'b', 'g', 'r'] 
    
    
    
    for k, col in zip(unique_labels, colors): 
        if k == -1: 
            # Black used for noise. 
            col = 'k'
      
        class_member_mask = (labels == k) 
      
        xy = X[class_member_mask & core_samples_mask] 
        plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, 
                                          markeredgecolor='k',  
                                          markersize=6) 
      
        xy = X[class_member_mask & ~core_samples_mask] 
        plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, 
                                          markeredgecolor='k', 
                                          markersize=6) 
      
    plt.title('number of clusters: %d' %n_clusters_) 
    plt.show() 



Data=pd.read_csv('Data.csv',index_col=0)

scaler = StandardScaler()
Data_scaled =scaler.fit_transform(Data)

#2.2 Normalize the data
Data_nor=normalize(Data_scaled)
#Data_nor=pd.DataFrame(Data_nor,index=Data.index)
#Data_nor.columns=Data.columns




pca = PCA(n_components=2)
pca_result = pca.fit_transform(Data_nor)



X=pd.DataFrame(pca_result,index=Data.index)

OPTICS_(X)











